#include <stdio.h>                                                          
#include <stdlib.h>
#include <string.h>
//下面两个头文件为本练习重要部分，用于socket创建，绑定，连接等
#include <sys/types.h> //数据类型定义
#include <sys/socket.h>   //提供socket函数及数据结构
#include <netinet/in.h> //定义数据结构sockaddr_in
#include <arpa/inet.h>
#include <unistd.h>
#include <errno.h>
#include <netdb.h>
#include<time.h>
#include<pthread.h>
#include<sys/time.h>
#include<semaphore.h>
#define BUFFER_SIZE 256
#define PORT 6666 
#define ZHUCE 1
#define DENGLU 2
#define BAOCUN 3
#define TUICHU 4 
#define THREAD_MAX_CONNECT 10 //最多允许多少个线程并发 
#define MAXSIZE 1000       //缓存队列可以存储的最大数据
#define MSG_FILENAME 5
#define MSG_CONTENT 6
#define MSG_ACK 7
#define MSG_DONE 8
#define MSG_EXCEPTION 9
#define CHENGGONG 10
#define SHIBAI 11
//声明接收与发送函数
char recv_buff[BUFFER_SIZE];
char send_buff[BUFFER_SIZE];// 存client要发送的信息
typedef struct msg
{
	int len;
	int type;
	char data[MAXSIZE];
}msg;
typedef struct msg_file
{
	msg filename; //文件名
	msg filecontent;//文件内容 
	
 }msg_file; 
typedef struct msg_client
{
	char username[10];//用户名
	char password[10];//密码
	msg_file file[10];//存储十个文件 
}msg_client;
typedef struct msg_server
{
	msg_file file[10];//存储十个文件 
}msg_server;

//数据准备阶段 
//初始化请求 
int buff_se=ZHUCE;
int buff_re=CHENGGONG;
//初始化一个用户 
msg_client client1;
msg_file file1;
//client1->username[10]="ming";//用户名和密码不能超过十位 
//client1->password[10]="123456";





//连接到server 
void wait_connect(int sockfd,struct sockaddr_in cli_addr)
{
	 if((sockfd=socket(AF_INET,SOCK_STREAM,0))<0)//创建套结字，
    {
        perror("socket");
        exit(1);
    }
    else
    {
        printf("connect server success.\n");
    }
    bzero(&cli_addr,sizeof(struct sockaddr_in));
    cli_addr.sin_family=AF_INET;
    cli_addr.sin_port=htons(PORT);
    cli_addr.sin_addr.s_addr=htonl(INADDR_ANY);
    if(connect(sockfd,(struct sockaddr*)(&cli_addr),sizeof(struct sockaddr))    <0)
    {
        perror("connect");
        exit(2);
    }
    else
    {
        printf("connect server success.\n");
    }
    memset(send_buff,0x00,sizeof(send_buff));
    memset(recv_buff,0x00,sizeof(send_buff));	
}
//对server发送标识符 
int write_require(int sockfd,int buff_se)
{
	int count;
        int loop;
	char buff_s[5];
	count = (int)(sizeof(int)/sizeof(char));
       for(loop=0;loop<count;loop++)
    {
	buff_s[loop] = (char)(buff_se >> (loop*sizeof(char)*8));
    }
	if(write(sockfd,buff_s,strlen(buff_s))<0)
            {
                perror("write");
                exit(3);
            }
            else
            {
                printf("Client向server发送信息标识符为:");
                printf("    %d\n",buff_se);
            }
            return buff_se;
}
//读取server发送的标识符 
int read_id(int sockfd)
{
	int reply;
	int loop;
        char buff_r[5];
        int num_temp;
	if(read(sockfd,buff_r,sizeof(buff_r))<0)
            {
                perror("read");
                exit(4);
            }
            else if(strlen(buff_r)>0)
            {
		for(loop=0;loop<4;loop++)	
		{	    
		num_temp = (int)buff_r[4-loop-1];	   
 		num_temp = num_temp << ((4-loop-1)*8);	   
 		switch(4-loop-1)	
   		 {	   
 			case 0:		
			num_temp = num_temp | 0xFFFFFF00;	
			reply = reply & num_temp;	
			break;	 
   			case 1:	
			num_temp = num_temp | 0xFFFF00FF;
			reply = reply & num_temp;	
			break;	  
  			case 2:	
			num_temp = num_temp | 0xFF00FFFF;
			reply = reply & num_temp;	
			break;	  
  			case 3:	
			num_temp = num_temp | 0x00FFFFFF;	
			reply = num_temp;		
			break;	  
  		}

                printf("server发来的标识符为:");
                printf("        :%d\n",reply);
                    }
    return reply;
}
} 
//对server发送简单消息 
void simple_write(int newsockfd,char *send_buff)
{

	 if(write(newsockfd,send_buff,strlen(send_buff))<0)
            {
                perror("write");
                exit(3);
            }
            else
            {
                printf("Client向server发送信息为:");
                printf("        %s\n",send_buff);
            }
    memset(send_buff,0x00,strlen(send_buff));
 } 
//将用户名和密码传入server，得到的回复 
char identity(char sockfd,msg_client client1)
{
	//写用户名
	simple_write(sockfd,client1.username);
    //写密码
	simple_write(sockfd,client1.password);
	//收到的回复为
	 return read_id(sockfd);
}

 void read_file(int newsockfd)
 {
 		 int head=0;//队头指针
		 int rear=0;//队尾指针
		 int numbytes;
                 struct msg *buf_ptr[THREAD_MAX_CONNECT];//缓冲区队列
		 sem_t buffer_area;//已经使用的缓冲区
		 sem_t empty_buffer_area;//未使用的缓冲区
		 //close(sockfd);
		 struct msg *rm;
		 pthread_t ptid1,ptid2;
		 struct timeval start;
	         struct timeval end;
		 rm=(struct msg *)malloc(MAXSIZE+sizeof(struct msg));
	        void cpy_sm_to_buf(struct msg *sm)

		{

    		sem_wait(&empty_buffer_area);

    		memset(buf_ptr[rear],0x00,MAXSIZE);

    		memcpy(buf_ptr[rear],sm,sizeof(struct msg)+sm->len);

    		//更新队列状态

    		rear = (rear+1)%THREAD_MAX_CONNECT;

    		sem_post(&buffer_area);

}

		//消费者，将缓存区的内容写入文件
          void* consumer1()
			   {
			   	    FILE *fp;
		               int consume_flag = MAXSIZE;

                while(consume_flag != 0)

                {
		sem_wait(&buffer_area);
		consume_flag = buf_ptr[head]->len;
		    if(buf_ptr[head]->type == MSG_FILENAME)

                    {

                        if(buf_ptr[head]->len>20)

                        {

                            printf("文件名过长！\n");

                            exit(-1);

                        }
                        //将文件file1中的文件名清零 
                          memset(file1.filename.data,0x00,20);
						//将缓冲区的数据赋给文件file1中的文件名 
                        memcpy(file1.filename.data,buf_ptr[head]->data,buf_ptr[head]->len);
						//创建名为（）的文件 
                        if((fp = fopen(file1.filename.data,"w+")) == NULL)

                        {

                            perror("fopen error");

                            exit(-1);

                        }

                    }

                    else if(buf_ptr[head]->type == MSG_CONTENT)

                    {

                        if(fwrite(buf_ptr[head]->data,1,buf_ptr[head]->len,fp)<0)

                        {

                            printf("fwrite error\n");

                            exit(-1);

                        }

                    }

                    else if(buf_ptr[head]->type == MSG_DONE)

                    {

                        printf("send MSG_DONE!\n");

                        break;

                    }

                    else if(buf_ptr[head]->type == MSG_EXCEPTION)

                    {

                        printf("read the file failed！%d\n",buf_ptr[head]->type);

                        exit(-1);

                    }

                    else

                    {

                        printf("文件类型错误!rm->type=%d\n",buf_ptr[head]->type);

                        exit(-1);

                    }

                    //更新队列状态

                    head = (head+1)%THREAD_MAX_CONNECT;

                    sem_post(&empty_buffer_area);

                }

                fclose(fp);

                pthread_exit(NULL);
			   }
//生产者，接收数据并放入缓存区
 void* producer1(void *arg)
			   {
			   	  int th_new_fd= *(int *)arg;
				int  producer_flag = MAXSIZE;

                while( producer_flag != 0)

                {

                    if((numbytes = recv(th_new_fd,(void *)rm,sizeof(struct msg),0)) == -1)

                    {

                        perror("recv error");

                        exit(-1);

                    }

                    if(numbytes == 0)//判断客户端是否断开

                    {

                        printf("客户端已断开！\n");

                        exit(-1);

                    }

                    producer_flag = rm->len;
                      if((rm->type == MSG_DONE)||(rm->type == MSG_EXCEPTION))

                    {

                        cpy_sm_to_buf(rm);

                        break;

                    }
					  memset(rm->data,0x00,MAXSIZE);

                    if((numbytes = recv(th_new_fd,rm->data,rm->len,0)) == -1)
					{ perror("recv error");
						 exit(-1);
					}
                    cpy_sm_to_buf(rm);

                }
                   free(rm);
                pthread_exit(NULL);
          		}
 //将文件保存到本地 
		 
	   	// gettimeofday(&start,NULL);
    //为存放server数据的缓冲区分配内存
			   for(int i=0;i<THREAD_MAX_CONNECT;i++)
				{
			   	buf_ptr[i]=(struct msg*)malloc(MAXSIZE+sizeof(struct msg));
			}
		if(sem_init(&buffer_area,0,0)==-1)
				{
					 perror("sem_init error");

                exit(-1);
				}
		if(sem_init(&empty_buffer_area,0,THREAD_MAX_CONNECT)==-1)
				{
						 perror("sem_init error");

                exit(-1);
				}
		 gettimeofday(&start,NULL);
		 pthread_create(&ptid1,NULL,producer1,&newsockfd);
	     pthread_create(&ptid2,NULL,consumer1,NULL);
         pthread_join(ptid1,NULL);
         pthread_join(ptid2,NULL);
		 gettimeofday(&end,NULL);
	     sem_destroy(&buffer_area);
         sem_destroy(&empty_buffer_area);
         printf("the time of sending the file is %ld\n",(end.tv_sec - start.tv_sec)*1000000+(end.tv_usec - start.tv_usec));
         
         free(rm);
	//释放缓冲队列
	     for(int i=0; i<THREAD_MAX_CONNECT; i++)
	       {
	           free(buf_ptr[i]);
	        }
            exit(0);
 }
 
 //将文件传给server 
 void write_file(int newsockfd)
 {
 		 int head=0;//队头指针
		 int rear=0;//队尾指针
		 int numbytes;
		 struct msg *buf_ptr[THREAD_MAX_CONNECT];//缓冲区队列
		 sem_t buffer_area;//已经使用的缓冲区
		 sem_t empty_buffer_area;//未使用的缓冲区
		 //close(sockfd);
		 struct msg *sm,*rm;
		 pthread_t ptid1,ptid2;
		 struct timeval start;
		 struct timeval end;
		void cpy_sm_to_buf(struct msg *sm)

{

    sem_wait(&empty_buffer_area);

    memset(buf_ptr[rear],0x00,MAXSIZE);

    memcpy(buf_ptr[rear],sm,sizeof(struct msg)+sm->len);

    //更新队列状态

    rear = (rear+1)%THREAD_MAX_CONNECT;

    sem_post(&buffer_area);

}

		//生产者，读文件并放入缓冲区
void* producer2(void *arg)
{
		 char *filepath=(char *)arg;

    FILE *fp;

    int i,j;

    int thread_exit_flag=0;

    int datalen;

    int produce_flag;

    struct msg *rm;

    rm = (struct msg*)malloc(MAXSIZE+sizeof(struct msg));

    //由文件路径获取文件名

    char file_name[256];

    memset(file_name,0x00,256);

    for(i=strlen(filepath)-1; i>=0; i--)

    {

        if(filepath[i] == '/')

        {

            break;

        }

    }

    for(j=i+1; j<strlen(filepath); j++)

    {

        file_name[j-i-1]=filepath[j];

    }

    rm->type = MSG_FILENAME;

    rm->len = strlen(file_name);

    memset(rm->data,0x00,MAXSIZE);

    memcpy(rm->data,file_name,rm->len);//将文件名拷贝到消息中

    cpy_sm_to_buf(rm);

//打开文件

    if((fp=fopen(filepath,"r")) == NULL)

    {

        perror("fopen error");

        exit(-1);

    }

//循环读取文件

    produce_flag = MAXSIZE;

    while(produce_flag == MAXSIZE)

    {

        rm->type = MSG_CONTENT;

        memset(rm->data,0x00,MAXSIZE);

        if((datalen=fread(rm->data,1,MAXSIZE,fp)) == 0)

        {

            if(feof(fp))

            {

                printf("注意，文件为空！\n");

            }

            else

            {

                rm->type = MSG_EXCEPTION;

                rm->len = 0;

                memset(rm->data,0x00,MAXSIZE);

                cpy_sm_to_buf(rm);

                produce_flag = datalen;

                printf("fread error\n");

                exit(-1);

            }

        }

        rm->len = datalen;

        cpy_sm_to_buf(rm);

        produce_flag = datalen;

    }

    rm->type = MSG_DONE;

    rm->len = 0;

    memset(rm->data,0x00,MAXSIZE);

    cpy_sm_to_buf(rm);

    fclose(fp);

    free(rm);

    pthread_exit(NULL);

 } 
 //消费者，将缓冲区内容发送到服务端
  void* consumer2(void *arg)

{

    int consufd = *(int *)arg;

    int i;

    int consume_flag = MAXSIZE;

    while(consume_flag != 0)

    {

        sem_wait(&buffer_area);

        //向服务端发送文件名消息

        consume_flag = buf_ptr[head]->len;

        if((send(consufd,buf_ptr[head],sizeof(struct msg)+buf_ptr[head]->len,0)) == -1)

        {

            perror("send error");

            exit(-1);

        }

        //更新队列状态

        head = (head+1)%THREAD_MAX_CONNECT;

        sem_post(&empty_buffer_area);

    }

    pthread_exit(NULL);
}
		 rm=(struct msg *)malloc(MAXSIZE+sizeof(struct msg));
		 sm=(struct msg *)malloc(MAXSIZE+sizeof(struct msg));
	//初始化确认信息
         sm->len=0;
	   	 gettimeofday(&start,NULL);
    //为存放server数据的缓冲区分配内存
			   for(int i=0;i<THREAD_MAX_CONNECT;i++)
				{
			   	buf_ptr[i]=(struct msg*)malloc(MAXSIZE+sizeof(struct msg));
			}
		if(sem_init(&buffer_area,0,0)==-1)
				{
					 perror("sem_init error");

                exit(-1);
				}
		if(sem_init(&empty_buffer_area,0,THREAD_MAX_CONNECT)==-1)
				{
						 perror("sem_init error");

                exit(-1);
				}
		 gettimeofday(&start,NULL);
///////////////////////////此处可写文件路径/////////////////////////////// 
		 pthread_create(&ptid1,NULL,producer2,file1.filename.data);
	     pthread_create(&ptid2,NULL,consumer2,&newsockfd);
         pthread_join(ptid1,NULL);
         pthread_join(ptid2,NULL);
		 gettimeofday(&end,NULL);
	     sem_destroy(&buffer_area);
         sem_destroy(&empty_buffer_area);
         printf("the time of sending the file is %ld\n",(end.tv_sec - start.tv_sec)*1000000+(end.tv_usec - start.tv_usec));
         //close(new_fd);
         free(sm);
	//释放缓冲队列
	     for(int i=0; i<THREAD_MAX_CONNECT; i++)
	       {
	           free(buf_ptr[i]);
	        }
            exit(0);
 }
 
void main(void)
{
	//初始化一个用户 
  //msg_client client1;
//client1.username[10]="ming";//用户名和密码不能超过十位 
//client1.password[10]="123456";

    int sockfd;//套结字
    struct sockaddr_in cli_addr;  //服务器的IPv4的套结字结构   //定义地址结构
    //从创建到连接socket 
	wait_connect(sockfd,cli_addr);
    while(1)
    {   int require=write_require(sockfd,buff_se);
        int reply;
    	switch(require)
    	{
    	  case ZHUCE:             //用户身份验证
			reply=identity(sockfd,client1);
			if(reply==CHENGGONG)
			{
///////////////////////////////如果注册成功////////////////////////////////////	
                			
			}
			else if(reply==SHIBAI) 
			{
//////////////////////////////如果注册失败////////////////////////////////////				
			}
			else
			{
/////////////////////////////意外/////////////////////////////////////////////				
			} 
		break;
			
	
	case DENGLU:
	
			//用户身份验证
			reply=identity(sockfd,client1);
			if(reply==CHENGGONG)
			{
///////////////////////////////如果登录成功////////////////////////////////////	
							 read_file(sockfd);
			}
			else if(reply==SHIBAI) 
			{
//////////////////////////////如果登录失败////////////////////////////////////				
			}
			else
			{
/////////////////////////////意外/////////////////////////////////////////////				
			} 
              break;
			
	
	case BAOCUN:
	
			//用户身份验证
			reply=identity(sockfd,client1);
			if(reply==CHENGGONG)
			{
///////////////////////////////如果保存成功////////////////////////////////////	
                   read_file(sockfd);			
			}
			else if(reply==SHIBAI) 
			{
//////////////////////////////如果保存失败////////////////////////////////////				
			}
			else
			{
/////////////////////////////意外/////////////////////////////////////////////				
			} 
			 
	 	break;
	case TUICHU:
	
		//用户身份验证
			reply=identity(sockfd,client1);
			if(reply==CHENGGONG)
			{
///////////////////////////////如果退出成功////////////////////////////////////	
 						read_file(sockfd);			
			}
			else if(reply==SHIBAI) 
			{
//////////////////////////////如果退出失败////////////////////////////////////				
			}
			else
			{
/////////////////////////////意外/////////////////////////////////////////////				
			} 
	 break;
	default:
			//用户身份验证
			identity(sockfd,client1); 
		break;	
	
	 }
}
    printf("end.\n");
    close(sockfd);   //关闭连接
    return;
}   
